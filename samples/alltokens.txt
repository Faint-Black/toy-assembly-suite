;; this file is meant to test all possible instructions and tokens.
;; << ONLY FOR COMPILATION TESTING, NOT FOR EXECUTION!!! >>

; i' a'm a com; "me"nt!

;; equivalent due to low endianness
.db 0x11 0x22 0x33 0x44 ; byte
.dw 0x2211 0x4433       ; word
.dd 0x44332211          ; double word
;; quad words are not in the language as a design choice.

;; double quotes automatically append a null terminator at the end
.db "ABCD"
;; single quotes does not
.db 'A' 'B' 'C' 'D'
.db 'ABCD'
;; full support for escape character syntax for the following special characters:
.db "\" \' \\ \t \n"

;; indentation for aesthetic purposes only
;; this is a (mostly) whitespace agnostic language
.macro WAIT_4_CYCLES
  NOP
  NOP
  NOP
  NOP
.endmacro

;; defines share the same purpose as standard macros
;; although limited to a single token per identifier
.define FRAME_COUNTER_ADDR $0x55

;; preprocessor testing area
Foo:
WAIT_4_CYCLES
WAIT_4_CYCLES
LDA FRAME_COUNTER_ADDR
INC A
STA FRAME_COUNTER_ADDR
;; repeat macros are nameless and are unwrapped on the spot
.repeat 0x4
  LDA 0xFF
  STA $0x1
.endrepeat

;; anonymous label and relative jump testing area
;; spooky to debug!
NormalLabel:
NOP
@AnonLabel:
NOP
@AnonLabel:
NOP
@:
JMP @-     ; refers to label "@:"
JMP @--    ; refers to label "@AnonLabel:" (second one)
JMP @---   ; refers to label "@AnonLabel:" (first one)
JMP @----  ; refers to label "NormalLabel:"
JMP @+     ; refers to label "_START:"
JMP @++    ; refers to label "ForwardReference:"

;; opcode syntax: all letters must be uppercase
;; literal syntax: "0xff"
;; address syntax: "$0xff"
;; use of the special "_START" label determines the entry point for the program,
;; its use in a source file is obligatory.
_START:
SYSCALL              ; Initiate a (virtual) machine system call
STRIDE 0x4           ; Sets the index instructions' byte stride
BRK                  ; Break, exits execution
NOP                  ; No operation, do nothing, preferably with some noticeable delay
CLC                  ; Clear carry, set the carry flag to 0
SEC                  ; Set carry, set the carry flag to 1
RET                  ; Return from subroutine
LDA 0x42             ; Load literal into accumulator
LDX 0x42             ; Load literal into X index
LDY 0x42             ; Load literal into Y index
LDA $0x1337          ; Load value from address into accumulator
LDX $0x1337          ; Load value from address into X index
LDY $0x1337          ; Load value from address into Y index
LDA X                ; Transfer the contents of the X index into the accumulator
LDA Y                ; Transfer the contents of the Y index into the accumulator
LDX A                ; Transfer the contents of the accumulator into the X index
LDX Y                ; Transfer the contents of the Y index into the X index
LDY A                ; Transfer the contents of the accumulator into the Y index
LDY X                ; Transfer the contents of the X index into the Y index
LDA $0x1337 X        ; Load value from address indexed by X into the accumulator
LDA $0x1337 Y        ; Load value from address indexed by X into the accumulator
LEA ForwardReference ; Load effective address into the accumulator
LEX ForwardReference ; Load effective address into the X index
LEY ForwardReference ; Load effective address into the Y index
STA $0x1337          ; Store accumulator value into address
STX $0x1337          ; Store X index value into address
STY $0x1337          ; Store Y index value into address
JMP ForwardReference ; Jump to rom address
JSR ForwardReference ; Save current PC and jump to rom address
CMP A X              ; Compares the accumulator to the X index
CMP A Y              ; Compares the accumulator to the Y index
CMP A 0x42           ; Compares the accumulator to a literal
CMP A $0x1337        ; Compares the accumulator to the value inside an address
CMP X A              ; Compares the X index to the accumulator
CMP X Y              ; Compares the X index to the Y index
CMP X 0x42           ; Compares the X index to a literal
CMP X $0x1337        ; Compares the X index to the value inside an address
CMP Y X              ; Compares the Y index to the X index
CMP Y A              ; Compares the Y index to the accumulator
CMP Y 0x42           ; Compares the Y index to a literal
CMP Y $0x1337        ; Compares the Y index to the value inside an address
BCS ForwardReference ; Branch if carry set
BCC ForwardReference ; Branch if carry clear
BEQ ForwardReference ; Branch if equal
BNE ForwardReference ; Branch if not equal
BMI ForwardReference ; Branch if minus
BPL ForwardReference ; Branch if plus
BVS ForwardReference ; Branch if overflow set
BVC ForwardReference ; Branch if overflow clear
ADD 0x42             ; accumulator += (literal + carry)
ADD $0x1337          ; accumulator += (value in address + carry)
ADD X                ; accumulator += (X index + carry)
ADD Y                ; accumulator += (Y index + carry)
SUB 0x42             ; accumulator -= (literal + carry - 1)
SUB $0x1337          ; accumulator -= (value in address + carry - 1)
SUB X                ; accumulator -= (X index + carry - 1)
SUB Y                ; accumulator -= (Y index + carry - 1)
INC A                ; Increment the accumulator by one
INC X                ; Increment the X index by one
INC Y                ; Increment the Y index by one
INC $0x1337          ; Increment the value inside the address by one
DEC A                ; Decrement the accumulator by one
DEC X                ; Decrement the X index by one
DEC Y                ; Decrement the Y index by one
DEC $0x1337          ; Decrement the value inside the address by one
PUSH A               ; Pushes the value of the accumulator to the stack
PUSH X               ; Pushes the value of the X index to the stack
PUSH Y               ; Pushes the value of the Y index to the stack
POP A                ; Pops a value from the stack into the accumulator
POP X                ; Pops a value from the stack into the X index
POP Y                ; Pops a value from the stack into the Y index

ForwardReference:
BRK
