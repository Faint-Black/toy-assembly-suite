;; This code will continuously print the fibonacci sequence.
;; it's just a demo meant to display the assembly functionalities
;; in a real-world practical application.

.macro PUSH_REGISTERS
  PUSH A
  PUSH X
  PUSH Y
.endmacro

.macro POP_REGISTERS
  POP Y
  POP X
  POP A
.endmacro

.macro PRINT_ACCUMULATOR
  LDX A
  LDA 0x4
  SYSCALL
  LDA 0x2
  LDX 0x1
  SYSCALL
.endmacro

.define SYSCALLCODE_PrintRomStr 0x0

STR1:
  .db "Printing 47 elements of the fibonacci sequence:\n"

;; [main]
_START:
  ;; print(STR1)
  LDA SYSCALLCODE_PrintRomStr
  LEX STR1
  SYSCALL
  ;; for (A = 0; A < 47; A++) print(fib(A))
  ;; 48 or above causes a signed integer overflow
  LDA 0x00
  @Loop:
    PUSH_REGISTERS
    JSR Fibonacci
    PRINT_ACCUMULATOR
    POP_REGISTERS
    INC A
    CMP A 0d47
    BCS @-
  BRK

;; [subroutine]
;; description: Calculate the nth fibonacci sequence number
;; arguments: n = Accumulator
;; return: result = Accumulator
;; memory use: addresses $0x0-$0xF (four DWORDs)
Fibonacci:
  ;; local memory map:
  ;; DWORD $0x00 = int n
  ;; DWORD $0x04 = int temp1
  ;; DWORD $0x08 = int temp2
  ;; DWORD $0x0C = int temp3

  ;; int n = input argument
  STA $0x0

  ;; if (arg == 0) return 0
  CMP A 0x00
  BNE @+
  RET
  @Skip:

  ;; if (arg == 1) return 1
  CMP A 0x01
  BNE @+
  RET
  @Skip:

  ;; int temp1 = 0
  LDA 0x00
  STA $0x4
  ;; int temp2 = 1
  LDA 0x01
  STA $0x8
  ;; n--, to avoid an off-by-one error
  DEC $0x0
  @Loop:
    ;; temp3 = temp1 + temp2
    LDA $0x4
    CLC
    ADD $0x8
    STA $0xC
    ;; temp1 = temp2
    LDA $0x8
    STA $0x4
    ;; temp2 = temp3
    LDA $0xC
    STA $0x8
    ;; if (--n != 0) continue loop
    DEC $0x0
    BNE @-

  ;; return temp2
  LDA $0x8
  RET
